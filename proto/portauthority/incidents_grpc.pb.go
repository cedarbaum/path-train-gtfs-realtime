// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package portauthorityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncidentsClient is the client API for Incidents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncidentsClient interface {
	GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error)
}

type incidentsClient struct {
	cc grpc.ClientConnInterface
}

func NewIncidentsClient(cc grpc.ClientConnInterface) IncidentsClient {
	return &incidentsClient{cc}
}

func (c *incidentsClient) GetIncidents(ctx context.Context, in *GetIncidentsRequest, opts ...grpc.CallOption) (*GetIncidentsResponse, error) {
	out := new(GetIncidentsResponse)
	err := c.cc.Invoke(ctx, "/portauthority.v1.Incidents/GetIncidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidentsServer is the server API for Incidents service.
// All implementations should embed UnimplementedIncidentsServer
// for forward compatibility
type IncidentsServer interface {
	GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error)
}

// UnimplementedIncidentsServer should be embedded to have forward compatible implementations.
type UnimplementedIncidentsServer struct {
}

func (UnimplementedIncidentsServer) GetIncidents(context.Context, *GetIncidentsRequest) (*GetIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidents not implemented")
}

// UnsafeIncidentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncidentsServer will
// result in compilation errors.
type UnsafeIncidentsServer interface {
	mustEmbedUnimplementedIncidentsServer()
}

func RegisterIncidentsServer(s grpc.ServiceRegistrar, srv IncidentsServer) {
	s.RegisterService(&Incidents_ServiceDesc, srv)
}

func _Incidents_GetIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentsServer).GetIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portauthority.v1.Incidents/GetIncidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentsServer).GetIncidents(ctx, req.(*GetIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Incidents_ServiceDesc is the grpc.ServiceDesc for Incidents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Incidents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portauthority.v1.Incidents",
	HandlerType: (*IncidentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIncidents",
			Handler:    _Incidents_GetIncidents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incidents.proto",
}
